# 集合
# 集合定义
A = {"python", 123, ("python", 213)}  # {123,'python',('python',213)}
B = set("123")  # {'1','2','3'}
C = {'python', 123, 'python', 123}  # {'python',123}

# 集合操作
S = {1, 2, 3}
T = {1, 2, 3, 4, 5}
for i in S:
    print(i)
S | T  # 并
S - T  # 差
S & T  # 交
S ^ T  # 补
S <= T | S < T  # 子集判断
S >= T | S > T  # 包含关系判断
S |= T  # 并,更新S集合
S -= T  # 差，更新S集合
S &= T  # 交，更新S集合
S ^= T  # 补，更新S集合

# 集合方法
S = {1, 2, 3}
S.add('x')  # 若x不在集合中，添加
S.discard('x')  # 移除，若不在集合中，不报错
S.remove('x')  # 移除，若不在集合中，产生KeyError异常
S.clear('x')  # 清空S
S.pop('x')  # 随机分会一个，更新S，若S为空，产生KeyError异常
S.copy()  # 返回集合的一个副本
len(S)  # 返回集合个数
'x' in S  # 判断x是否在集合中
'x' not in S  # 与上一个相反
set('x')  # 将其他数据类型转换为集合

# 序列类型
# 序列类型定义
s1 = [1, 2, 3]  # 列表
s2 = list('123')  # 将其他序列转换为list
t1 = (1, 2, 3)  # 元组
t2 = tuple('123')  # 将其他序列转换为tuple
v1 = '123'  # 字符串
v2 = str([1, 2, 3])  # 将其他序列转换为str

# 序列的操作
x = 1
s = [1, 2, 3, 4, 5, 6]
t = [2, 3, 4]
x in s  # 是否存在元素x
x not in s  # 与上相反
s + t  # 连接两个序列
s*3  # 将序列s重复3次
s[1]  # 取序列的第1个，从0开始数
s[1:2]  # 切片,还有更多用法，自行搜索

# 序列通用函数
s = [1, 2, 3]
x = 3
i, j = 1, 3
len(s)  # 长度
min(s)  # 序列中的最小元素，s中元素需要可比较
max(s)  # 序列中的最大值，s中元素需要可比较
s.index(x, i, j)  # 返回从i到j位置第一次出现x的位置,若j为2,若出ValueError,因为查找的序号不包含2
s.count(x)

# 列表类型操作
s = ['a', 'b', 'c']
t = ['d', 'e']
del s[2]  # 删除第二个
del s[0:2]  # 删除前两个
s += t  # 将t的元素复制一份到s中
s *= 3  # 将s元素重复3次

# 列表方法
s = [1, 2, 3]
s.append('a')  # 追加
s.clear()  # 清空
s.copy()  # 复制
s.insert(0, 'b')  # 插入到0的位置
s.pop(1)  # 取出第一个位置并删除
s.remove('a')  # 删除第一个a的元素
s.reverse()  # 反转

# 字典dict
# 定义字典
d = {"1": "a", "2": "b", "3": "c"}
d = dict(a=1, b=2)

# 字典函数
d = {1: "a", 2: "b", 3: "c"}
del d[1]  # 删除第一个
1 in d  # 判断1是不是存在
d.keys()  # 返回所有键值信息
d.values()  # 返回字典d
d.items()  # 返回字典所有键值对
d.get(1,"a") # 获取key=1的元素，如果没有返回 a
d.pop(1,"a") # 获取key=1的元素，并删除，没有则返回 a
d.popitem() # 随机取出一组键值对，元组形式
d.clear() # 清空dict
len(d) # 返回长度